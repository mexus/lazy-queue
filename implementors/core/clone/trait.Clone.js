(function() {var implementors = {};
implementors["futures"] = [{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Async&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for AsyncSink&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone, E:&nbsp;Clone&gt; Clone for FutureResult&lt;T, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;F&gt; Clone for Shared&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Future,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for SharedItem&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone&gt; Clone for SharedError&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl Clone for ExecuteErrorKind","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Clone, U:&nbsp;Clone, F:&nbsp;Clone, Fut:&nbsp;Clone&gt; Clone for With&lt;S, U, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sink,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: FnMut(U) -&gt; Fut,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: IntoFuture,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut::Future: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;S::SinkItem: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Clone, E:&nbsp;Clone&gt; Clone for SinkFromErr&lt;S, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for SinkMapErr&lt;S, F&gt;","synthetic":false,"types":[]},{"text":"impl Clone for UnparkEvent","synthetic":false,"types":[]},{"text":"impl Clone for Task","synthetic":false,"types":[]},{"text":"impl Clone for NotifyHandle","synthetic":false,"types":[]},{"text":"impl Clone for Canceled","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for SendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for TrySendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for UnboundedSender&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for Sender&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for Sender&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for UnboundedSender&lt;T&gt;","synthetic":false,"types":[]}];
implementors["lazy_queue"] = [{"text":"impl&lt;Item&gt; Clone for LazyQueue&lt;Item&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Item&gt; Clone for LazyQueue&lt;Item&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Item&gt; Clone for LazyQueue&lt;Item&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Item&gt; Clone for LazyQueue&lt;Item&gt;","synthetic":false,"types":[]}];
implementors["tokio_sync"] = [{"text":"impl&lt;T&gt; Clone for Lock&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for Sender&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for UnboundedSender&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for Receiver&lt;T&gt;","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()